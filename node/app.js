'use strict';

var express = require('express');
var request = require('request');
var Timeline = require('pebble-api');
var timeline = new Timeline();
var util = require('util');
var mongo = require('mongodb');
var monk = require('monk');
var db = monk('localhost:27017/cve-data');

var app = express();
app.set('port', (process.env.PORT || 5000));

// handler for GET /
app.get('/', function (req, res) {
  res.status(404).send('Not found');
});

var timeline = new Timeline();

// Register a new user: GET /senduserpin/:userToken
app.get('/senduserpin/:userToken', function (req, res) {

  var userToken = req.params.userToken;

  console.log(util.format("Got a request from %s to subscribe to CVE's", userToken));

  db.get('usertokens').find({'token': userToken}, function(err, docs) {
    if (docs.length == 0) { // No duplicate users
      db.get('usertokens').insert({'token': userToken});
      res.send();
    }
    else {
      console.log("Multiple registrations");
      res.send("Already registered");
    }
  });
});

function sendPin(cve, userToken) {
  console.log(util.format("Sending %s to %s", cve['cve_id'], userToken));
  var pin = new Timeline.Pin({
    id: cve['cve_id'],
    time: new Date(),
    layout: new Timeline.Pin.Layout({
      type: Timeline.Pin.LayoutType.GENERIC_PIN,
      tinyIcon: Timeline.Pin.Icon.PIN,
      title: cve['cve_id'],
      body: cve['summary']
    }),
    createNotification: {
      "layout": {
        "type": "genericNotification",
        "title": cve['cve_id'],
        "tinyIcon": "system://images/NOTIFICATION_FLAG",
        "body": cve['summary']
      }
    }
  });

  timeline.sendUserPin(userToken, pin, function (err, body, resp) {
    if (err) {
      console.log(util.format("Error for %s:", userToken));
      return console.error(err);
    }

    res.send('Status code: ' + resp.statusCode);
  });
}

function process_cves() {
  // 30 most recent CVE's
  var options = {
    url: 'http://www.cvedetails.com/json-feed.php?numrows=30&vendor_id=0&product_id=0&version_id=0&hasexp=0&opec=0&opov=0&opcsrf=0&opfileinc=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opginf=0&opdos=0&orderby=1&cvssscoremin=0',
    json: true
  };

  request(options, function(error, response, body) {
    // For each cve, check if we've already sent it out. If not, send it to all users
    body.forEach(function(cve) {
      db.get('cves').find({'cve': cve['cve_id']}, function (err, cve_docs) {
        if ( cve_docs.length == 0 ) {
          // Testing purposes
          //db.get('cves').insert({'cve': cve['cve_id']});
          console.log("Sending pin for " + cve['cve_id']);
          db.get('usertokens').find({}, function(err, user_docs) {
            user_docs.forEach(function(user) {
              sendPin(cve, user['token']);
            });
          });
        }
      });
    });
  });
};

// every 5 minutes check if there are any new CVE's
//setInterval(process_cves, 300000);
process_cves();

// start the webserver
app.listen(app.get('port'), function () {
  console.log('CVE timeline source listening on port %s', app.get('port'));
});
